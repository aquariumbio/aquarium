{"version":3,"sources":["MainMenu.jsx","Login.js","App.js","serviceWorker.js","index.js"],"names":["makeStyles","theme","menuButton","marginRight","spacing","Login","props","state","login","password","loginErrors","handleChange","bind","handleSubmit","event","this","setState","target","name","value","axios","post","then","response","data","token","catch","error","console","log","preventDefault","onSubmit","TextField","id","label","variant","onChange","Component","useStyles","root","flexGrow","title","App","Container","className","disableGutters","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","initGA","ReactGA","initialize","GApageView","page","pageview","GAmodalView","modal","modalview","GAevent","categoryName","eventName","category","action","nonInteraction","GAtiming","variableName","valueNum","timing","variable","GAexception","detail","exception","description","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kdAOkBA,aAAW,SAACC,GAAD,MAAY,CACrCC,WAAY,CACVC,YAAaF,EAAMG,QAAQ,Q,4FCLZC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,GACPC,SAAU,GACVC,YAAa,IAGf,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAVH,E,yDAaNE,GACXC,KAAKC,SAAL,eACGF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,U,mCAIzBL,GAAQ,IAAD,EACUC,KAAKR,MAAzBC,EADU,EACVA,MAAOC,EADG,EACHA,SAEfW,IACGC,KACC,gCACA,CACEb,MAAOA,EACPC,SAAUA,IAGba,MAAK,SAAAC,GACAA,EAASC,KAAKC,SAKnBC,OAAM,SAAAC,GACLC,QAAQC,IAAI,cAAeF,MAE/Bb,EAAMgB,mB,+BAIN,OACI,0BAAMZ,KAAK,QAAQa,SAAUhB,KAAKF,cAChC,kBAACmB,EAAA,EAAD,CAAWC,GAAG,QAAQC,MAAM,QAAQC,QAAQ,WAAWhB,MAAOJ,KAAKR,MAAMC,MAAO4B,SAAUrB,KAAKJ,eAC/F,kBAACqB,EAAA,EAAD,CAAWC,GAAG,WAAWC,MAAM,WAAWC,QAAQ,WAAWhB,MAAOJ,KAAKR,MAAME,SAAU2B,SAAUrB,KAAKJ,oB,GA/C/E0B,aCS7BC,EAAYtC,aAAW,SAACC,GAAD,MAAY,CACvCsC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLD,SAAU,OAIC,SAASE,IACNJ,IAEhB,OACE,kBAACK,EAAA,EAAD,CAAWC,UAAU,MAAMC,gBAAgB,GACzC,kBAAC,EAAD,OCfcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SAInB,IAAMC,EAAS,WACpBC,IAAQC,WAAW,mBAGRC,EAAa,SAACC,GACzBH,IAAQI,SAASD,IAGNE,EAAc,SAACC,GAC1BN,IAAQO,UAAUD,IAGPE,EAAU,SAACC,EAAcC,GACpCV,IAAQ3C,MAAM,CACVsD,SAAUF,EACVG,OAAQF,EACRjC,MAAO,YACPf,MAAO,GACPmD,gBAAgB,KAITC,EAAW,SAACL,EAAcM,EAAcC,GACnDhB,IAAQiB,OAAO,CACXN,SAAUF,EACVS,SAAUH,EACVrD,MAAOsD,KAIAG,EAAc,SAACC,GAC1BpB,IAAQqB,UAAU,CAAEC,YAAaF,KDoF7B,kBAAmBG,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEd1D,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0D,a","file":"static/js/main.dc847907.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport {IconButton, Menu, MenuItem} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu';\n\n\n// Custom styling for material-UI components\nconst useStyles = makeStyles((theme) => ({\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n  }));\n\nexport default function(MainMenu) {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState(false);\n\n    \n    \n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n\n    return (\n        <Fragment>\n            <IconButton edge=\"start\" \n                        className={classes.menuButton} \n                        color=\"inherit\" aria-label=\"menu\" \n                        aria-controls=\"App-main-menu\" \n                        aria-haspopup=\"true\" \n                        onClick={handleClick}>\n                <MenuIcon/>\n            </IconButton>\n            <Menu id=\"App-main-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}>\n                <MenuItem onClick={handleClose}>Direct Purchasae</MenuItem>\n                <MenuItem onClick={handleClose}>Logs</MenuItem>\n                <MenuItem onClick={handleClose}>Users</MenuItem>\n                <MenuItem onClick={handleClose}>Groups</MenuItem>\n                <MenuItem onClick={handleClose}>Announcements</MenuItem>\n                <MenuItem onClick={handleClose}>Budgets</MenuItem>\n                <MenuItem onClick={handleClose}>Invoices</MenuItem>\n                <MenuItem onClick={handleClose}>Parameters</MenuItem>\n                <MenuItem onClick={handleClose}>Sample Type Definitions</MenuItem>\n                <MenuItem onClick={handleClose}>Containers</MenuItem>\n                <MenuItem onClick={handleClose}>Location Wizards</MenuItem>\n                <MenuItem onClick={handleClose}>Import Workflows</MenuItem>\n                <MenuItem onClick={handleClose}>Export Workflows</MenuItem>\n                <MenuItem onClick={handleClose}>Help</MenuItem>\n            </Menu>\n        </Fragment>\n    );\n}","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport TextField from '@material-ui/core/TextField';\n\nexport default class Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      login: \"\",\n      password: \"\",\n      loginErrors: {}\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n  }\n\n  handleSubmit(event) {\n    const { login, password } = this.state;\n\n    axios\n      .post(\n        \"http://localhost:3001/sign_in\",\n        {\n          login: login,\n          password: password\n        },\n      )\n      .then(response => {\n        if (response.data.token) {\n          //TODO: write function >> this.props.handleSuccessfulLogin(response.data);\n          \n        }\n      })\n      .catch(error => {\n        console.log(\"login error\", error);\n      });\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n        <form name=\"login\" onSubmit={this.handleSubmit}>\n          <TextField id=\"login\" label=\"Login\" variant=\"outlined\" value={this.state.login} onChange={this.handleChange}/>\n          <TextField id=\"password\" label=\"Password\" variant=\"outlined\" value={this.state.password} onChange={this.handleChange}/>\n        </form>\n    )\n  }\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {initGA} from './index'\nimport {Container, AppBar, Toolbar, Typography} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport './MainMenu';\nimport MainMenu from './MainMenu';\nimport NavTabs from './NavTabs';\nimport Login from './Login';\n// useEffect(() => { initGA(); }, []);\n\n\n// Custom styling for material-UI components\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  return (\n    <Container className=\"App\" disableGutters={true} >\n      <Login/>\n  \n      {/* <AppBar position=\"static\" >\n        <Toolbar>\n          <MainMenu/>\n          <Typography variant=\"h5\" \n                      align=\"left\" \n                      className={classes.title}>\n            AQUARIUM\n          </Typography>\n          <NavTabs/> \n        </Toolbar>\n      </AppBar> */}\n    </Container>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ReactGA from \"react-ga\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// Google Analytics resources\nexport const initGA = () => {       \n  ReactGA.initialize('UA-177438863-1'); // GA tracking id\n}\n\nexport const GApageView = (page) => {   \n  ReactGA.pageview(page);   \n}\n\nexport const GAmodalView = (modal) => {\n  ReactGA.modalview(modal);\n}\n\nexport const GAevent = (categoryName, eventName) => {\n  ReactGA.event({       \n      category: categoryName,  // Required\n      action: eventName,       // Required\n      label: 'labelName',       \n      value: 10,       \n      nonInteraction: false     \n  });   \n}\n\nexport const GAtiming = (categoryName, variableName, valueNum) => {\n  ReactGA.timing({       \n      category: categoryName,       \n      variable: variableName,       \n      value: valueNum\n  });\n};\n\nexport const GAexception = (detail) => {\n  ReactGA.exception({ description: detail });\n};\n// TODO: Set up custom exceptions page in GA admin\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}