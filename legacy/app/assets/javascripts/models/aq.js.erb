AQ = {
  config: {
    no_items_in_backtrace: false
  }
};

AQ.check_signed_in = function(response) {
  if ( response.headers().status == "Not-logged-in" || response.data.error == "Not-logged-in" ) {
    window.location = "/signin";
  } else {
    return response;
  }
}

AQ.init = function(http) {

  AQ.http = http;

  if ( '<%= Rails.env %>' == 'development' ) { // Controls whether to spit out query performance information

    AQ.get = function() { 

      let start_time = new Date(),
          args = arguments;

      return AQ.http.get.apply(null,args).then(result => {
        let url = Array.from(args)[0],
            elapsed = new Date() - start_time;
        AQ.check_signed_in(result);
        console.log(`%cGET %c${url} completed in %c${elapsed} ms`, 
                    "font-weight: bold", "font-weight: normal", "color: $selection-highlight-color");
        return result;
      })

    }

    AQ.post = function() { 

      let start_time = new Date(),
          args = arguments;

      return AQ.http.post.apply(null,args).then(result => { 
        let url = Array.from(args)[0],
            data = JSON.stringify(Array.from(args)[1]).slice(0,100),
            elapsed = new Date() - start_time;
        AQ.check_signed_in(result);
        console.log(`%cPOST %c${url}, ${data} ... completed in %c${elapsed} ms`, 
                    "font-weight: bold", "font-weight: normal","color: $selection-highlight-color");
        return result;
      })

    }

    AQ.put = function() { 

      let start_time = new Date(),
          args = arguments;

      return AQ.http.put.apply(null,args).then(result => { 
        let url = Array.from(args)[0],
            elapsed = new Date() - start_time;
        AQ.check_signed_in(result);
        console.log(`%cPUT %c${url}, completed in %c${elapsed} ms`, 
                    "font-weight: bold", "font-weight: normal","color: $selection-highlight-color");
        return result;
      })

    }    

  } else {

    AQ.get = function() { 
      let args = arguments;
      return AQ.http.get.apply(null,args).then(AQ.check_signed_in);
    }

    AQ.post = function() { 
      let args = arguments;
      return AQ.http.post.apply(null,args).then(AQ.check_signed_in);
    }

    AQ.put = function() { 
      let args = arguments;     
      return AQ.http.put.apply(null,args).then(AQ.check_signed_in);
    }

  }

  AQ.next_record_id = 0;
  AQ.sample_cache = {}; // used by AQ.Sample.find_by_identifier
  AQ.sample_type_cache = {}; // used by AQ.Sample.find_by_identifier
  AQ.sample_identifier_cache = {}; // used by AQ.to_sample_identifier

}

AQ.get_sample_names = function() {

  return new Promise(function(resolve,reject) {
    AQ.get('/browser/all').then(
      (response) => {
        AQ.sample_names = response.data;
        resolve(AQ.sample_names);
      }, (response) => {
        reject(response.data.errors);
      }
    );
  });

}

AQ.sample_names_for = function(sample_type_name) {

  var samples = [];
  if ( sample_type_name ) {
    aq.each([sample_type_name],function(type) {
      samples = samples.concat(AQ.sample_names[type])
    });
  }
  return samples;

}

AQ.to_sample_identifier = function(id) {

  var sid = "" + id + ": Name not found. AQ.sample_names may not be loaded";

  if ( AQ.sample_identifier_cache[id] ) {

    sid = AQ.sample_identifier_cache[id];

  } else {

    for ( var st in AQ.sample_names ) {
      aq.each(AQ.sample_names[st], s => {
        var i = parseInt(s.split(": ")[0]);
        if ( i == id ) {
          sid = s;
          AQ.sample_identifier_cache[id] = s;
        }
      })
    }

  }

  return sid;

}

AQ.id_from = function(sid) { 
  var parts;
  if ( typeof sid == "number" ) {
    return sid;
  } else if ( typeof sid != "string" ) {
    return undefined;
  } else {
    parts = sid.split(": ");
    if ( parts.length > 0 ) {
      var id = parseInt(parts[0]);
      if ( id ) {
        return id
      } else {
        return undefined;
      }
    } else {
      return undefined;
    }
  }
}

AQ.sid_from = function(id) { 
  // ??
}

AQ.items_for = function(sample_id,object_type_id) {

  return new Promise(function(resolve,reject) {

    AQ.post('/json/items/', { sid: sample_id, oid: object_type_id }).then(
      (response) => {
        resolve(aq.collect(response.data, (item) => { 
          if ( item.collection ) {
            var i = item;
            i.collection = AQ.Collection.record(i.collection);
            return new AQ.Record(AQ.Item,item);
          } else {
            return new AQ.Record(AQ.Item,item); 
          }
        }));
      }, (response) => {
        reject(response.data.errors);
      }
    );

  });

}
